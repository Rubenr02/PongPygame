mport the pygame library and initialise the game engine
import random
import pygame
from ball import Ball
from paddle import Paddle
from powers import Colision_power
from big_paddle import BigPaddle

paddle_sizeA = 100

move_paddle = True

BigPaddle().affect_player_A()


def play_pong():
    # Initialize pygame
    pygame.mixer.init()
    pygame.init()
    triggered = False

    # Define some colors
    BLACK = (0, 0, 0)
    WHITE = (255, 255, 255)
    PINK = (248, 131, 121)
    VIOLET = (216, 191, 216)

    # Open a new window
    size = (700, 500)
    screen = pygame.display.set_mode(size)
    pygame.display.set_caption("Pong")

    BigPaddle().affect_player_A()

    # setting up the paddle for player A
    paddleA = Paddle(PINK, 10, 100)
    paddleA.rect.x = 20
    paddleA.rect.y = 200

    smallA = Paddle(PINK, 10, 50)
    smallA.rect.x = 20
    smallA.rect.y = 200

    bigA = Paddle(PINK, 10, 150)
    bigA.rect.x = 20
    bigA.rect.y = 200

    # setting up the paddle for player B
    paddleB = Paddle(VIOLET, 10, 100)
    paddleB.rect.x = 670
    paddleB.rect.y = 200

    smallB = Paddle(VIOLET, 10, 50)
    smallB.rect.x = 670
    smallB.rect.y = 200

    bigB = Paddle(VIOLET, 10, 150)
    bigB.rect.x = 670
    bigB.rect.y = 200

    # setting up the ball and its position
    ball = Ball(WHITE, 14, 14)
    ball2 = Ball(BLACK, 14, 14)

    # setting up the ball speed
    ball.velocity = [random.randint(4, 4), random.randint(-4, 4)]
    ball2.velocity = [random.randint(4, 4), random.randint(-4, 4)]

    # setting up the powers and its position
    powers = Colision_power(VIOLET, 108, 108)
    powers.spawn_pos()

    # This will be a list that will contain all the sprites  we intend to use in our game.
    all_sprites_list = pygame.sprite.Group()

    # Add the 2 paddles and the ball to the list of objects
    all_sprites_list.add(paddleA)
    all_sprites_list.add(paddleB)
    all_sprites_list.add(ball)
    all_sprites_list.add(powers)

    # The loop will carry on until the user exits the game (e.g. clicks the close button).
    carryOn = True

    # The clock will be used to control how fast the screen updates
    clock = pygame.time.Clock()

    # Initialise player scores
    scoreA = 0
    scoreB = 0



    # Resets the ball position after a point is scored
    def reset():
        ball.rect.x = 343
        ball.rect.y = 220
        ball.velocity = [random.randint(4, 4), random.randint(-4, 4)]
        paddleA = Paddle(PINK, 10, 100)
        paddleA.rect.x = 20
        paddleA.rect.y = 200
        smallA = paddleA
        smallA.update()
        paddleA.freeze_duration = 0
        paddleB.freeze_duration = 0
        powers.spawn_pos()


    while carryOn:
        # --- Main event loop - See if I continue with the game
        # User did something
        for event in pygame.event.get():
            # If user clicked close
            if event.type == pygame.QUIT:
                # Flag that we are done so we exit this loop
                carryOn = False
            # Or he used the keyboard
            elif event.type == pygame.KEYDOWN:
                # Pressing the x Key will quit the game
                if event.key == pygame.K_x:
                    # quit the loop
                    carryOn = False

        # Actually performing game-like things:
        # Moving the paddles when the use uses the arrow keys (player B) or "W/S" keys (player A)

        # Creating a timer
        timer = int(pygame.time.get_ticks() / 1000)

        keys = pygame.key.get_pressed()
        # this built-in method saves the user input from the keyboard

        # moving the paddles when the user hits W/S (player A) or arrow up/arrow down (player B)
        if keys[pygame.K_w]:
            paddleA.moveUp(5)
            triggered = True

        if keys[pygame.K_s]:
            paddleA.moveDown(5)
            triggered = True

        if keys[pygame.K_UP]:
            paddleB.moveUp(5)
            triggered = True

        if keys[pygame.K_DOWN]:
            paddleB.moveDown(5)
            triggered = True

        # Game logic
        ball.move(move=triggered)

        # Checking if the ball was scored and changing the speed accordingly

        if ball.rect.x >= 690:
            scoreA += 1
            reset()
            triggered = False
            ball.velocity[0] = -ball.velocity[0]


        if ball.rect.x <= 0:
            scoreB += 1
            reset()
            triggered = False
            ball.velocity[0] = -ball.velocity[0]

        if scoreA >= 10 or scoreB >= 10:
            pygame.quit()

        # Checking if the ball bounced on the walls

        if ball.rect.y > 480:
            ball.velocity[1] = -ball.velocity[1]

        if ball.rect.y <= 0:
            ball.velocity[1] = -ball.velocity[1]

        # Detect collisions between the ball and the paddles and change its speed accordingly(use the method we created)
        if pygame.sprite.collide_rect(ball, paddleA):
            ball.velocity = [random.randint(8, 8), random.randint(-8, 8)]
            ball.lastplayerhit = "paddleA"
            # Registers from which player the last hit on the ball was

        elif pygame.sprite.collide_rect(ball, paddleB):
            ball.bounce()
            ball.lastplayerhit = "paddleB"
            # Registers from which player the last hit on the ball was

        elif pygame.sprite.collide_rect(ball, paddleB):
            ball.velocity = [random.randint(8, 8), random.randint(-8, 8)]

        elif pygame.sprite.collide_rect(ball, paddleA):
            ball.bounce()


        # All the extra if and elif statements were implemented in order to fix the exiting bugs where the ball got stuck to the sides of the paddles

        # setting up a list of the existing powers
        power_names = ["invisible","freeze","shrink","enlarge","bounce"]

        # making a random choice of the existing powers
        power_ups = random.choice(power_names)

        # checking collision between ball and powers(ball)
        collision1_power = pygame.sprite.collide_mask(ball, powers)

        # if the chosen power is freeze, then:
        if power_ups == "freeze":
            # if there is collision between ball and powers(ball) and the last registered hit is from player B
            if collision1_power and ball.lastplayerhit == "paddleB":
                paddleA.freeze_duration = 75  # The freeze time duration is activated and player A is affected
                powers.spawn_pos()  # Re-spawns the ball in a random position

            # if there is collision between ball and powers(ball) and the last registered hit is from player A
            elif collision1_power and ball.lastplayerhit == "paddleA":
                paddleB.freeze_duration = 75  # The freeze time duration is activated and player B is affected
                powers.spawn_pos()  # Re-spawns the ball in a random position

        # if the chosen power is bounce, then:
        if power_ups == "bounce":
            # if there is collision between ball and powers(ball) and the last registered hit is from player A
            if collision1_power:
                ball.bounce()  # The ball bounces
                powers.spawn_pos()  # Re-spawns the ball in a random position

        # This power-up works as a power for both players
        # This means that there is no distinction between the affected players, it can be good or bad for you

        if power_ups == "shrink":
            if collision1_power and ball.lastplayerhit == "paddleA":
                all_sprites_list.remove(paddleB)
                all_sprites_list.add(smallB)
                paddleB = smallB
                paddleB.update()
                powers.spawn_pos()

            elif collision1_power and ball.lastplayerhit == "paddleB":
                all_sprites_list.remove(paddleA)
                all_sprites_list.add(smallA)
                paddleA = smallA
                paddleA.update()
                powers.spawn_pos()

        if power_ups == "enlarge":
            if collision1_power and ball.lastplayerhit == "paddleB":
                all_sprites_list.remove(paddleA)
                all_sprites_list.add(bigA)
                paddleA = bigA
                paddleA.update()
                powers.spawn_pos()


            elif collision1_power and ball.lastplayerhit == "paddleA":
                all_sprites_list.remove(paddleB)
                all_sprites_list.add(bigB)
                paddleB = bigB
                paddleB.update()


        if power_ups == "invisible":
            if collision1_power:
                all_sprites_list.remove(ball)
                all_sprites_list.add(ball2)
                ball = ball2



        # Set a flag to track whether the collision has occurred

        # Drawing code should go here
        # First, clear the screen to black.
        screen.fill(BLACK)
        BigPaddle().affect_player_A()
        # Draw the net A WHITE LINE FROM TOP TO BOTTOM (USE PYGAME BUILT-IN METHOD)
        pygame.draw.line(screen, WHITE, [349, 0], [349, 500], 5)
        # Now let's draw all the sprites in one go. (For now we only have 2 sprites!)
        all_sprites_list.draw(screen)

        # Display scores:
        pygame.font.get_fonts()
        font = pygame.font.Font(None, 74)
        text = font.render(str(scoreA), 1, (PINK))
        screen.blit(text, (250, 10))
        text = font.render(str(scoreB), 1, (VIOLET))
        screen.blit(text, (420, 10))

        # --- Go ahead and update the screen with what we've drawn.
        pygame.display.flip()

        # --- Limit to 60 frames per second
        clock.tick(60)

    # Once we have exited the main program loop we can stop the game engine:
    pygame.quit()
